#include <iostream>
using namespace std;

class node {
    
    public:
    int data;
    node* next;
    
    node(){
        data=0;
        next = NULL;
    }    
        
};

class queue{
    public:
    node* front;
    node* rear;
    
    queue(){
        front=rear=NULL;
    }
    
    bool isEmpty(){
        if(front==NULL && rear==NULL)
        return true;
        else
        return false;
    }
    
    void enqueue(int newitem){
        node* newnode = new node();
        newnode->data = newitem;
        if(isEmpty())
        front=rear=newnode;
        else{
        rear->next = newnode;
        rear= newnode; 
        }
    }
    
    void display(){
        node* temp = front;
        while(temp!=NULL)
        {
            cout<<temp->data<<endl;
            temp=temp->next;
        }
        cout<<endl;
    }
    
    void dequeue(){
        if(isEmpty()){
            cout<<"queue is empty";
        }
        else if(front==rear){
            delete front;
            front=rear=NULL;
        }
        else{
            node* delptr = front;
            front = front->next;
            delete delptr;
        }
       
    }
    
    int getFront(){
        return front->data;
    }
    
    int getRear(){
        return rear->data;
    }
    
    int count(){
        int counter;
        node* temp = front;
        while(temp!=NULL)
        {
            counter++;
            temp=temp->next;
        }
        return counter;
    }
    
    bool isFound(int key){
        bool found = false;
        node* temp = front;
        while(temp!=NULL)
        {
            if(temp->data==key)
            return found;
            temp=temp->next;
        }
        return found;
    }
    
    void clear(){
        while(!isEmpty){
            dequeue();
        }
    }
    
};


int main(){
    
    
    
}